<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #> 

<#
var typeDictionary = new Dictionary<string, Tuple<string, string>> 
{
{"int", new Tuple<string, string>("int", "Int32")},
{"long", new Tuple<string, string>("bigint", "Int64")},
{"double", new Tuple<string, string>("float", "Double")},
{"string", new Tuple<string, string>("nvarchar(4000)", "String")}
};
#>
using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Data.SqlTypes;
using System.Text;
using Microsoft.SqlServer.Server;

public partial class UserDefinedFunctions
{
<#
foreach (var edge in EdgeList) {
    var edgeName = edge.Item1;
	var edgeType = edge.Item2; //The edge has sink and source in the same table or not.
    var variables = edge.Item3;
	var attributeSize = variables.Count();
	var byteSize = (attributeSize - 1) / 8 + 1; 
		if (attributeSize == 0) {
			byteSize = 0;
		}
#>
    private class <#=edgeName#>DecoderResult
    {
        public long Sink { get; set; }
		public Int32 EdgeId{ get; set; }
<#foreach (var variable in variables) {#>
        public Sql<#=typeDictionary[variable.Item2].Item2#> <#=variable.Item1#> { get; set; }
<#}#>
    }

    public static void <#=edgeName#>Decoder_FillRow(
        object tableTypeObject,
        out SqlInt64 sink, out SqlInt32 edgeid<#
    var indent = "        ";
    for (var i = 0; i < variables.Count; ++i)
    {
        WriteLine(",");
        Write(indent + "out Sql" + typeDictionary[variables[i].Item2].Item2 + " " + variables[i].Item1);
    }#>)
    {
        var decoderResult = (<#=edgeName#>DecoderResult)tableTypeObject;
        sink = decoderResult.Sink;
		edgeid = decoderResult.EdgeId;
<#foreach (var variable in variables) {#>
      <#=variable.Item1 #> = decoderResult.<#=variable.Item1 #>;
<#}#>
    }

    [SqlFunction(
        DataAccess = DataAccessKind.None,
        TableDefinition = "Sink bigint, EdgeId int<#
        for (var i = 0; i < variables.Count; ++i)
            Write(", " + variables[i].Item1 + " " + typeDictionary[variables[i].Item2].Item1);
        #>",
        FillRowMethodName = "<#=edgeName#>Decoder_FillRow",
        IsDeterministic = true,
        IsPrecise = false
        )]
   public static IEnumerable <#=edgeName#>Decoder(SqlBytes array, SqlBytes deleteEdge)
    {
		var deleDict =  new Dictionary<Int32, bool>();
		if (deleteEdge != null && !deleteEdge.IsNull)
		{	
			//var ms = new MemoryStream(deleteEdge.Value);
			var delebr = new BinaryReader(deleteEdge.Stream);
			while (delebr.BaseStream.Position != delebr.BaseStream.Length)
			{
				deleDict[delebr.ReadInt32()] = true;
			}
		}
        if (array == null || array.IsNull)
            yield break;
		//var br = new BinaryReader(new MemoryStream(array.Value));
		var br = new BinaryReader(array.Stream);
		var edgeid = (Int32)0;
        while (br.BaseStream.Position != br.BaseStream.Length)
        {
			edgeid++;
		<#if (byteSize != 0) {#>
		byte[] bitmap = br.ReadBytes(<#=byteSize#>);
		<#}#>
            var sink = br.ReadInt64();
<#
                indent += "    ";
				var count = 0;
                foreach (var variable in variables)
                {
                    var variableName = variable.Item1;
                    var variableType = variable.Item2;
					var str = "((bitmap["+ (count / 8).ToString() + "]" + " & " + (1 << (count%8)).ToString() + ") == 0)? Sql" + typeDictionary[variableType].Item2 + ".Null" +" :";
					if (attributeSize == 0) {
						str = "";
					}
                    WriteLine(indent + "var _" + variableName + " = " + str + "br.Read" + typeDictionary[variableType].Item2 + "();");
					count++;
                }
#>
			if (!deleDict.ContainsKey(edgeid)) {
            yield return new <#=edgeName#>DecoderResult
            {
                Sink = sink, EdgeId = edgeid,
<#
                indent += "    ";
                for (var i = 0; i < variables.Count; ++i)
                {
                    WriteLine(indent + variables[i].Item1 + " = _" + variables[i].Item1 + ",");
                }
#>
            };
        }
    }
    }

<#if (edgeType) {#>
	//Path Decoder
	private class <#=edgeName#>PathDecoderResult 
	{
		public int EdgeId{get; set;}
		public long SinkId{get; set;}
<#foreach (var variable in variables) {#>
        public Sql<#=typeDictionary[variable.Item2].Item2#> <#=variable.Item1#> { get; set; }
<#}#>
	}

	public static void <#=edgeName#>PathDecoder_FillRow(
        object tableTypeObject,
        out SqlInt32 EdgeId, out SqlInt64 SinkId <#
		for (var i = 0; i < variables.Count; ++i)
		{
			WriteLine(",");
			Write(indent + "out Sql" + typeDictionary[variables[i].Item2].Item2 + " " + variables[i].Item1);
		}#>
		)
    {
        var decoderResult = (<#=edgeName#>PathDecoderResult)tableTypeObject;
        EdgeId = decoderResult.EdgeId;
        SinkId = decoderResult.SinkId;
<#foreach (var variable in variables) {#>
      <#=variable.Item1 #> = decoderResult.<#=variable.Item1 #>;
<#}#>
    }
	
      	[SqlFunction(
        DataAccess = DataAccessKind.None,
        TableDefinition = "EdgeId int, SinkId bigint",
        FillRowMethodName = "<#=edgeName#>PathDecoder_FillRow",
        IsDeterministic = true,
        IsPrecise = false
        )]
    public static IEnumerable <#=edgeName#>PathDecoder(SqlBytes  PathVarbinary, SqlInt64 nodeid, SqlBytes array, SqlBytes dele)
    {
        if (array == null || array.IsNull)
            yield break;
		//var PathMemory = (PathVarbinary != null && !PathVarbinary.IsNull) ? new MemoryStream(PathVarbinary.Value) : new MemoryStream();
		Stream PathMemory = (PathVarbinary != null && !PathVarbinary.IsNull) ? PathVarbinary.Stream : new MemoryStream();
		var brPath = new BinaryReader(PathMemory);
		var PathDict =  new Dictionary<Tuple<long, Int32>, bool>();
		if (PathVarbinary != null && !PathVarbinary.IsNull) {
			while (brPath.BaseStream.Position != brPath.BaseStream.Length)
			{
				var Edgeid = Tuple.Create(brPath.ReadInt64(), brPath.ReadInt32());
				PathDict[Edgeid] = true;
			}
		}
		
		foreach (var it in <#=edgeName#>Decoder(array, dele))
		{
			var  adjacent = it as <#=edgeName#>DecoderResult;
            var EdgeId = Tuple.Create(nodeid.Value, adjacent.EdgeId);
            if (!PathDict.ContainsKey(EdgeId))
            {
            	yield return new <#=edgeName#>PathDecoderResult
            	{
					EdgeId = adjacent.EdgeId,
            		SinkId = adjacent.Sink, <#
					for (var i = 0; i < variables.Count; ++i)
					{
						WriteLine(indent + variables[i].Item1 + " = adjacent." + variables[i].Item1 + ",");
					}
#>
            	};
            }
		}
		yield break;
    }
<#}#>
    [Microsoft.SqlServer.Server.SqlFunction(
        DataAccess = DataAccessKind.None,
        IsDeterministic = true,
        IsPrecise = true)]
    public static SqlBytes <#=edgeName#>Recycle(SqlBytes src, SqlBytes toRecycle)
    {
        if (src.IsNull || src.Length == 0)
		{
            return SqlBytes.Null;
		}
        if (toRecycle.IsNull || src.Length == 0)
            return src;
        var toRecycleArray = new Int32[(int)toRecycle.Length];
        Buffer.BlockCopy(toRecycle.Value, 0, toRecycleArray, 0, (int)toRecycle.Length);

		var toRecycleHashTable = new Hashtable();
		for (var i = 0; i < toRecycleArray.Length; ++i)
		{
			if (toRecycleHashTable.Contains(toRecycleArray[i]))
			{
				var itemCount = (int) toRecycleHashTable[toRecycleArray[i]];
				toRecycleHashTable[toRecycleArray[i]] = itemCount + 1;
			}
			else
				toRecycleHashTable.Add(toRecycleArray[i], 1);
		}


        //using (var srcMs = new MemoryStream(src.Value))
        //{
            //using (var br = new BinaryReader(srcMs))
            using (var br = new BinaryReader(src.Stream))
			{
                using (var resultMs = new MemoryStream())
                {
                    using (var bw = new BinaryWriter(resultMs))
                    {
						var edgeid = (Int32)0;
                        while (br.BaseStream.Position < br.BaseStream.Length)
                        {
							<#if (byteSize != 0) {#>
							//read bitmap
							byte[] bitmap = br.ReadBytes(<#=byteSize#>);
							<#}#>
                            // read
                            var sink = br.ReadInt64();
							
							edgeid++;
							if (toRecycleHashTable.Contains(edgeid))
							{
							<#var count3 = 0;
							foreach (var variable in variables)
							{
								string str = "(bitmap["+ (count3 / 8).ToString() + "]" + " & " + (1 << (count3%8)).ToString() + ") != 0";
								count3++;
								var variableName = variable.Item1;
								var variableType = variable.Item2;
								WriteLine(indent + "if("+ str + ") {");
								WriteLine(indent + "br.Read" + typeDictionary[variableType].Item2 + "();");
								WriteLine(indent + "}" );
							} 
							#>
								continue;
							}
                            // write

							<#if (byteSize != 0) {#>
							bw.Write(bitmap);
							<#}#>
                            bw.Write(sink);
                            <#
                            indent = "							";
							var _count = 0;
                            foreach (var variable in variables)
                            {
								string str = "(bitmap["+ (_count / 8).ToString() + "]" + " & " + (1 << (_count%8)).ToString() + ") != 0";
								_count++;
                                var variableName = variable.Item1;
                                var variableType = variable.Item2;
								WriteLine(indent + "if("+ str + ") {");
                                WriteLine(indent + "bw.Write(br.Read" + typeDictionary[variableType].Item2 + "());");
								WriteLine(indent + "}" );
                            } #>
                        }
                    return new SqlBytes(resultMs.ToArray());
                }
            }
        }
        //}

    }
	<# }#>
}

<#foreach (var edge in EdgeList) {
    var edgeName = edge.Item1;
    var variables = edge.Item3;
	var attributeSize = variables.Count();
	var byteSize = (attributeSize - 1) / 8 + 1; 
		if (attributeSize == 0) {
			byteSize = 0;
		}
#>
[Serializable]
    [Microsoft.SqlServer.Server.SqlUserDefinedAggregate(Format.UserDefined,
        IsInvariantToNulls = true,
        IsInvariantToOrder = true,
        IsInvariantToDuplicates = false,
        MaxByteSize = -1)]
public struct <#=edgeName#>Encoder : IBinarySerialize
{
    private MemoryStream _stream;
    private BinaryWriter _writer;

    public void Init()
    {
        _stream = new MemoryStream();
        _writer = new BinaryWriter(_stream);
    }

    public void Accumulate(
        SqlInt64 sink<#
    var indent = "        ";
    for (var i = 0; i < variables.Count; ++i)
    {
        WriteLine(",");
        Write(indent + "Sql" + typeDictionary[variables[i].Item2].Item2 + " " + variables[i].Item1);
    }#>)
    {
        if (sink.IsNull)
            return;
		<#if (byteSize != 0) {#>
		Byte[] bitmap = new Byte[<#=byteSize#>];
		Array.Clear(bitmap, 0, bitmap.Length);
		<#}#>
<#
	var count = 0;
    foreach (var variable in variables)
    {
        var variableName = variable.Item1;
        var variableType = variable.Item2;
		var pos = count / 8;
		var bit = (1 << (count % 8));
        #>
		if (!<#=variableName#>.IsNull) {
			bitmap[<#=pos#>] |= <#=bit#>; 
		}
    <#
		count++;
    }
    #>
	<#if (byteSize != 0) {#>
		_writer.Write(bitmap);
	<#}#>
        _writer.Write(sink.Value);
<#
    foreach (var variable in variables)
    {
        var variableName = variable.Item1;
        var variableType = variable.Item2;
        #>
		if (!<#=variableName#>.IsNull) {
			_writer.Write(<#=variableName#>.Value);
		}
    <#
    }
    #>
    }


    public void Merge (<#=edgeName#>Encoder group)
    {
        _writer.Write(group._stream.GetBuffer(), 0, (int) group._stream.Length);
    }

    public SqlBytes Terminate()
    {
        var bytes = _stream.ToArray();
        return new SqlBytes(bytes);
    }

    public void Read(BinaryReader r)
    {
        if (_stream != null)
            _stream.Dispose();
        if (_writer != null)
            _writer.Dispose();
        _stream = new MemoryStream();
        _writer = new BinaryWriter(_stream);
        _writer.Write(r.ReadBytes((int)r.BaseStream.Length));
    }

    public void Write(BinaryWriter w)
    {
        w.Write(_stream.ToArray());
    }


}

	
<#}#>
