// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace GraphView
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class DeployScriptTemplate : DeployScriptTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 7 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
  
            var typeDictionary = new Dictionary<string, Tuple<string, string, int>>
            {
                {"int", new Tuple<string, string, int>("int", "SqlInt32", 4)},
                {"long", new Tuple<string, string, int>("bigint", "SqlInt64", 8)},
                {"double", new Tuple<string, string, int>("float", "SqlDouble", 8)},
                {"string", new Tuple<string, string, int>("nvarchar(4000)", "SqlString", 4)}
            };

            
            #line default
            #line hidden
            
            #line 16 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
 if (Type == 0) {
            
            #line default
            #line hidden
            this.Write(" \r\nCREATE ASSEMBLY ");
            
            #line 17 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("_Assembly FROM ");
            
            #line 17 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Path));
            
            #line default
            #line hidden
            this.Write("\r\nGO\r\n\r\n");
            
            #line 20 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
foreach (var edge in EdgeList) {
    var edgeName = edge.Item1;
	var edgeType = edge.Item2; //The edge has sink and source in the same table or not.
    var variables = edge.Item3;

            
            #line default
            #line hidden
            this.Write("CREATE FUNCTION ");
            
            #line 25 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 25 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("_Decoder(\r\n");
            
            #line 26 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
for (int i = 0; i < InputCount; i++) {
            
            #line default
            #line hidden
            this.Write("@array");
            
            #line 27 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(" varbinary(max)");
            
            #line 27 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
 if (i != InputCount - 1) WriteLine(","); 
            
            #line default
            #line hidden
            
            #line 28 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write(", @dele varbinary(max)) RETURNS TABLE\r\n( \r\n    Sink bigint, EdgeId int");
            
            #line 30 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"

    for (var i = 0; i < variables.Count; ++i)
    {
        WriteLine(",");
        Write("    " + variables[i].Item1 + " " + typeDictionary[variables[i].Item2].Item1);
    }
    WriteLine("");

            
            #line default
            #line hidden
            this.Write(")\r\n  AS EXTERNAL NAME ");
            
            #line 39 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("_Assembly.UserDefinedFunctions.");
            
            #line 39 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("Decoder; \r\nGO\r\n\r\n");
            
            #line 42 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
if (edgeType)
	{
            
            #line default
            #line hidden
            this.Write("CREATE FUNCTION ");
            
            #line 44 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 44 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("_PathDecoder(\r\n@PathVarbinary varbinary(max), @nodeid bigint, @array varbinary(ma" +
                    "x), @array2 varbinary(max)) RETURNs TABLE\r\n(\r\n\tEdgeId int, Sink bigint");
            
            #line 47 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"

    for (var i = 0; i < variables.Count; ++i)
    {
        WriteLine(",");
        Write("    " + variables[i].Item1 + " " + typeDictionary[variables[i].Item2].Item1);
    }
    WriteLine("");

            
            #line default
            #line hidden
            this.Write(")\r\n  AS EXTERNAL NAME ");
            
            #line 56 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("_Assembly.UserDefinedFunctions.");
            
            #line 56 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("PathDecoder;\r\nGO\r\n\r\ncreate function ");
            
            #line 59 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 59 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write(@"_bfs(@source bigint)
returns table
as 
return 
with  allPath(sink, varPath) as (
       select @source, CAST(0x as varbinary(max))
       union all
       select newpath.Sink, allpath.varPath + convert(binary(8), reverse(convert(binary(8), allpath.sink))) + convert(binary(4),reverse(convert(binary(4),newpath.EdgeId)))
       from (allPath join ");
            
            #line 67 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NodeTable));
            
            #line default
            #line hidden
            this.Write(" on  allPath.sink = ");
            
            #line 67 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NodeTable));
            
            #line default
            #line hidden
            this.Write(".GlobalNodeId)\r\n       cross apply ");
            
            #line 68 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 68 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("_PathDecoder(allPath.varPath,");
            
            #line 68 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NodeTable));
            
            #line default
            #line hidden
            this.Write(".GlobalNodeId, ");
            
            #line 68 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NodeTable));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 68 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 68 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NodeTable));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 68 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("DeleteCol) as newpath\r\n)\r\nselect *\r\nfrom allPath\r\nGO\r\n");
            
            #line 73 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\nCREATE FUNCTION ");
            
            #line 75 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 75 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("_Recycle(@src varbinary(max), @toRecycle varbinary(max))\r\nRETURNS varbinary(max)\r" +
                    "\nEXTERNAL NAME ");
            
            #line 77 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("_Assembly.UserDefinedFunctions.");
            
            #line 77 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("Recycle;\r\nGO\r\n\r\nCREATE AGGREGATE ");
            
            #line 80 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 80 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("_Encoder\r\n(\r\n    @Sink bigint");
            
            #line 82 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"

    for (var i = 0; i < variables.Count; ++i)
    {
        WriteLine(",");
        Write("    @" + variables[i].Item1 + " " + typeDictionary[variables[i].Item2].Item1);
    }
    WriteLine(""); 

            
            #line default
            #line hidden
            this.Write(")\r\nRETURNS varbinary(max)\r\nEXTERNAL NAME ");
            
            #line 92 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("_Assembly.");
            
            #line 92 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("Encoder; \r\nGO\r\n\r\n");
            
            #line 95 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 96 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 99 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
 if (Type == 1) {
            
            #line default
            #line hidden
            
            #line 100 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
foreach (var edge in EdgeList) {
    var edgeName = edge.Item1;
    var variables = edge.Item3;

            
            #line default
            #line hidden
            this.Write("CREATE ASSEMBLY ");
            
            #line 104 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 104 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("_Assembly FROM ");
            
            #line 104 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Path));
            
            #line default
            #line hidden
            this.Write("\r\nGO\r\nCREATE FUNCTION ");
            
            #line 106 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 106 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("_Decoder(\r\n");
            
            #line 107 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
for (int i = 0; i < InputCount; i++) {
            
            #line default
            #line hidden
            this.Write("@array");
            
            #line 108 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(" varbinary(max), @dele");
            
            #line 108 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(" varbinary(max)");
            
            #line 108 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
 if (i != InputCount - 1) WriteLine(","); 
            
            #line default
            #line hidden
            
            #line 109 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write(") RETURNS TABLE\r\n(\r\n    Sink bigint, EdgeId int");
            
            #line 111 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"

    for (var i = 0; i < variables.Count; ++i)
    {
        WriteLine(",");
        Write("    " + variables[i].Item1 + " " + typeDictionary[variables[i].Item2].Item1);
    }
    WriteLine("");

            
            #line default
            #line hidden
            this.Write(") \r\n  AS EXTERNAL NAME ");
            
            #line 120 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 120 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("_Assembly.UserDefinedFunctions.");
            
            #line 120 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("Decoder; \r\nGO\r\n");
            
            #line 122 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 123 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 126 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
 if (Type == 2) {
            
            #line default
            #line hidden
            this.Write("CREATE ASSEMBLY ");
            
            #line 127 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("Assembly FROM ");
            
            #line 127 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Path));
            
            #line default
            #line hidden
            this.Write("\r\nGO\r\n\r\nCREATE AGGREGATE ");
            
            #line 130 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("GlobalNodeIdEncoder\r\n(\r\n\t@SrcId bigint\r\n)\r\nRETURNS varbinary(max)\r\nEXTERNAL NAME " +
                    "");
            
            #line 135 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("Assembly.GlobalNodeIdEncoder; \r\nGO\r\nCREATE AGGREGATE ");
            
            #line 137 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("EdgeIdEncoder\r\n(\r\n\t@EdgeId int\r\n)\r\nRETURNS varbinary(max)\r\nEXTERNAL NAME ");
            
            #line 142 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("Assembly.EdgeIdEncoder; \r\nGO\r\n\r\nCREATE FUNCTION SingletonTable() RETURNS TABLE\r\n(" +
                    "\r\n\tmemoBit bit\r\n)\r\nas EXTERNAL NAME ");
            
            #line 149 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("Assembly.UserDefinedFunctions.SingletonTable\r\nGO\r\n\r\nCREATE FUNCTION DownSizeFunct" +
                    "ion\r\n(@id int)\r\nRETURNS INT\r\nAS\r\n EXTERNAL NAME ");
            
            #line 156 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyName));
            
            #line default
            #line hidden
            this.Write("Assembly.UserDefinedFunctions.DownSizeFunction\r\nGO\r\n\r\nCREATE FUNCTION UpSizeFunct" +
                    "ion(@topvalue int) RETURNS TABLE\r\nAS\r\nRETURN\r\n\tSELECT TOP(@topvalue) * FROM Sing" +
                    "letonTable()\r\nGO\r\n");
            
            #line 164 "C:\Users\v-junry.FAREAST\Source\Repos\GraphView\GraphView\DeployScriptTemplate.tt"
}
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class DeployScriptTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
