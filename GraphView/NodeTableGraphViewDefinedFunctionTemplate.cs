// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace GraphView
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class NodeTableGraphViewDefinedFunctionTemplate : NodeTableGraphViewDefinedFunctionTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(" \r\n\r\n");
            
            #line 8 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"

var typeDictionary = new Dictionary<string, Tuple<string, string>> 
{
{"int", new Tuple<string, string>("int", "Int32")},
{"long", new Tuple<string, string>("bigint", "Int64")},
{"double", new Tuple<string, string>("float", "Double")},
{"string", new Tuple<string, string>("nvarchar(4000)", "String")}
};

            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.IO;\r\nusing System.Collections;\r\nusing System.Collecti" +
                    "ons.Generic;\r\nusing System.Data.SqlTypes;\r\nusing System.Text;\r\nusing Microsoft.S" +
                    "qlServer.Server;\r\n\r\npublic partial class UserDefinedFunctions\r\n{\r\n");
            
            #line 27 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"

foreach (var edge in EdgeList) {
    var edgeName = edge.Item1;
	var edgeColumnId = edge.Item2; //The edge has sink and source in the same table or not.
    var variables = edge.Item3;
	var attributeSize = variables.Count();
	var byteSize = (attributeSize - 1) / 8 + 1; 
		if (attributeSize == 0) {
			byteSize = 0;
		}

            
            #line default
            #line hidden
            this.Write("    private class ");
            
            #line 38 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("DecoderResult\r\n    {\r\n        public long Sink { get; set; }\r\n\t\tpublic Int32 Edge" +
                    "Id{ get; set; }\r\n");
            
            #line 42 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
foreach (var variable in variables) {
            
            #line default
            #line hidden
            this.Write("        public Sql");
            
            #line 43 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeDictionary[variable.Item2].Item2));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 43 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Item1));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 44 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n    public static void ");
            
            #line 47 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("Decoder_FillRow(\r\n        object tableTypeObject,\r\n        out SqlInt64 sink, out" +
                    " SqlInt32 edgeid");
            
            #line 49 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"

    var indent = "        ";
    for (var i = 0; i < variables.Count; ++i)
    {
        WriteLine(",");
        Write(indent + "out Sql" + typeDictionary[variables[i].Item2].Item2 + " " + variables[i].Item1);
    }
            
            #line default
            #line hidden
            this.Write(")\r\n    {\r\n        var decoderResult = (");
            
            #line 57 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("DecoderResult)tableTypeObject;\r\n        sink = decoderResult.Sink;\r\n\t\tedgeid = de" +
                    "coderResult.EdgeId;\r\n");
            
            #line 60 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
foreach (var variable in variables) {
            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 61 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Item1));
            
            #line default
            #line hidden
            this.Write(" = decoderResult.");
            
            #line 61 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Item1));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 62 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n    [SqlFunction(\r\n        DataAccess = DataAccessKind.None,\r\n        Ta" +
                    "bleDefinition = \"Sink bigint, EdgeId int");
            
            #line 67 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"

        for (var i = 0; i < variables.Count; ++i)
            Write(", " + variables[i].Item1 + " " + typeDictionary[variables[i].Item2].Item1);
        
            
            #line default
            #line hidden
            this.Write("\",\r\n        FillRowMethodName = \"");
            
            #line 71 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("Decoder_FillRow\",\r\n        IsDeterministic = true,\r\n        IsPrecise = false\r\n  " +
                    "      )]\r\n   public static IEnumerable ");
            
            #line 75 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write(@"Decoder(SqlBytes array, SqlBytes deleteEdge)
    {
		var deleDict =  new Dictionary<Int32, bool>();
		if (deleteEdge != null && !deleteEdge.IsNull)
		{	
			//var ms = new MemoryStream(deleteEdge.Value);
			var delebr = new BinaryReader(deleteEdge.Stream);
			while (delebr.BaseStream.Position != delebr.BaseStream.Length)
			{
				deleDict[delebr.ReadInt32()] = true;
			}
		}
        if (array == null || array.IsNull)
            yield break;
		//var br = new BinaryReader(new MemoryStream(array.Value));
		var br = new BinaryReader(array.Stream);
		var edgeid = (Int32)0;
        while (br.BaseStream.Position != br.BaseStream.Length)
        {
			edgeid++;
		");
            
            #line 95 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
if (byteSize != 0) {
            
            #line default
            #line hidden
            this.Write("\t\tbyte[] bitmap = br.ReadBytes(");
            
            #line 96 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(byteSize));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t");
            
            #line 97 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("            var sink = br.ReadInt64();\r\n");
            
            #line 99 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"

                indent += "    ";
				var count = 0;
                foreach (var variable in variables)
                {
                    var variableName = variable.Item1;
                    var variableType = variable.Item2;
					var str = "((bitmap["+ (count / 8).ToString() + "]" + " & " + (1 << (count%8)).ToString() + ") == 0)? Sql" + typeDictionary[variableType].Item2 + ".Null" +" :";
					if (attributeSize == 0) {
						str = "";
					}
                    WriteLine(indent + "var _" + variableName + " = " + str + "br.Read" + typeDictionary[variableType].Item2 + "();");
					count++;
                }

            
            #line default
            #line hidden
            this.Write("\t\t\tif (!deleDict.ContainsKey(edgeid)) {\r\n            yield return new ");
            
            #line 115 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("DecoderResult\r\n            {\r\n                Sink = sink, EdgeId = edgeid,\r\n");
            
            #line 118 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"

                indent += "    ";
                for (var i = 0; i < variables.Count; ++i)
                {
                    WriteLine(indent + variables[i].Item1 + " = _" + variables[i].Item1 + ",");
                }

            
            #line default
            #line hidden
            this.Write("            };\r\n        }\r\n    }\r\n    }\r\n\r\n\t//Path Decoder\r\n\tprivate class ");
            
            #line 131 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGeneratorResult \r\n\t{\r\n\t\tpublic int EdgeId{get; set;}\r\n\t\tpublic long " +
                    "EdgeColumnId {get; set;}\r\n\t\tpublic long SinkId{get; set;}\r\n");
            
            #line 136 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
foreach (var variable in variables) {
            
            #line default
            #line hidden
            this.Write("        public Sql");
            
            #line 137 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeDictionary[variable.Item2].Item2));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 137 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Item1));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 138 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n\tpublic static void ");
            
            #line 141 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGenerator_FillRow(\r\n        object tableTypeObject,\r\n        out Sql" +
                    "Int32 EdgeId, out SqlInt64 EdgeColumnId, out SqlInt64 SinkId ");
            
            #line 143 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"

		for (var i = 0; i < variables.Count; ++i)
		{
			WriteLine(",");
			Write(indent + "out Sql" + typeDictionary[variables[i].Item2].Item2 + " " + variables[i].Item1);
		}
            
            #line default
            #line hidden
            this.Write("\t\t)\r\n    {\r\n        var decoderResult = (");
            
            #line 151 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGeneratorResult)tableTypeObject;\r\n        EdgeId = decoderResult.Edg" +
                    "eId;\r\n\t\tEdgeColumnId =  decoderResult.EdgeColumnId;\r\n        SinkId = decoderRes" +
                    "ult.SinkId;\r\n");
            
            #line 155 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
foreach (var variable in variables) {
            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 156 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Item1));
            
            #line default
            #line hidden
            this.Write(" = decoderResult.");
            
            #line 156 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Item1));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 157 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("    }\r\n\t\r\n      \t[SqlFunction(\r\n        DataAccess = DataAccessKind.None,\r\n      " +
                    "  TableDefinition = \"EdgeId int, EdgeColumnId bigint, SinkId bigint\",\r\n        F" +
                    "illRowMethodName = \"");
            
            #line 163 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGenerator_FillRow\",\r\n        IsDeterministic = true,\r\n        IsPrec" +
                    "ise = false\r\n        )]\r\n    public static IEnumerable ");
            
            #line 167 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write(@"ExclusiveEdgeGenerator(SqlBytes  PathVarbinary, SqlInt64 nodeid, SqlBytes array, SqlBytes dele)
    {
        if (array == null || array.IsNull)
            yield break;
		//var PathMemory = (PathVarbinary != null && !PathVarbinary.IsNull) ? new MemoryStream(PathVarbinary.Value) : new MemoryStream();
		Stream PathMemory = (PathVarbinary != null && !PathVarbinary.IsNull) ? PathVarbinary.Stream : new MemoryStream();
		var brPath = new BinaryReader(PathMemory);
		var PathDict =  new Dictionary<Tuple<long, long, Int32>, bool>();
		if (PathVarbinary != null && !PathVarbinary.IsNull) {
			while (brPath.BaseStream.Position != brPath.BaseStream.Length)
			{
				var Edgeid = Tuple.Create(brPath.ReadInt64(), brPath.ReadInt64(), brPath.ReadInt32());
				PathDict[Edgeid] = true;
			}
		}
		
		foreach (var it in ");
            
            #line 183 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("Decoder(array, dele))\r\n\t\t{\r\n\t\t\tvar  adjacent = it as ");
            
            #line 185 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("DecoderResult;\r\n            var EdgeId = Tuple.Create(nodeid.Value, (long) ");
            
            #line 186 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeColumnId));
            
            #line default
            #line hidden
            this.Write(", adjacent.EdgeId);\r\n            if (!PathDict.ContainsKey(EdgeId))\r\n            " +
                    "{\r\n            \tyield return new ");
            
            #line 189 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGeneratorResult\r\n            \t{\r\n\t\t\t\t\tEdgeId = adjacent.EdgeId,\r\n\t\t\t" +
                    "\t\tEdgeColumnId = ");
            
            #line 192 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeColumnId));
            
            #line default
            #line hidden
            this.Write(",\r\n            \t\tSinkId = adjacent.Sink, ");
            
            #line 193 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"

					for (var i = 0; i < variables.Count; ++i)
					{
						WriteLine(indent + variables[i].Item1 + " = adjacent." + variables[i].Item1 + ",");
					}

            
            #line default
            #line hidden
            this.Write("            \t};\r\n            }\r\n\t\t}\r\n\t\tyield break;\r\n    }\r\n\r\n    [Microsoft.SqlS" +
                    "erver.Server.SqlFunction(\r\n        DataAccess = DataAccessKind.None,\r\n        Is" +
                    "Deterministic = true,\r\n        IsPrecise = true)]\r\n    public static SqlBytes ");
            
            #line 209 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write(@"Recycle(SqlBytes src, SqlBytes toRecycle)
    {
        if (src.IsNull || src.Length == 0)
		{
            return SqlBytes.Null;
		}
        if (toRecycle.IsNull || src.Length == 0)
            return src;
        var toRecycleArray = new Int32[(int)toRecycle.Length];
        Buffer.BlockCopy(toRecycle.Value, 0, toRecycleArray, 0, (int)toRecycle.Length);

		var toRecycleHashTable = new Hashtable();
		for (var i = 0; i < toRecycleArray.Length; ++i)
		{
			if (toRecycleHashTable.Contains(toRecycleArray[i]))
			{
				var itemCount = (int) toRecycleHashTable[toRecycleArray[i]];
				toRecycleHashTable[toRecycleArray[i]] = itemCount + 1;
			}
			else
				toRecycleHashTable.Add(toRecycleArray[i], 1);
		}


        //using (var srcMs = new MemoryStream(src.Value))
        //{
            //using (var br = new BinaryReader(srcMs))
            using (var br = new BinaryReader(src.Stream))
			{
                using (var resultMs = new MemoryStream())
                {
                    using (var bw = new BinaryWriter(resultMs))
                    {
						var edgeid = (Int32)0;
                        while (br.BaseStream.Position < br.BaseStream.Length)
                        {
							");
            
            #line 245 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
if (byteSize != 0) {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t//read bitmap\r\n\t\t\t\t\t\t\tbyte[] bitmap = br.ReadBytes(");
            
            #line 247 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(byteSize));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\t\t\t\t");
            
            #line 248 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("                            // read\r\n                            var sink = br.Re" +
                    "adInt64();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tedgeid++;\r\n\t\t\t\t\t\t\tif (toRecycleHashTable.Contains(ed" +
                    "geid))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t");
            
            #line 255 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
var count3 = 0;
							foreach (var variable in variables)
							{
								string str = "(bitmap["+ (count3 / 8).ToString() + "]" + " & " + (1 << (count3%8)).ToString() + ") != 0";
								count3++;
								var variableName = variable.Item1;
								var variableType = variable.Item2;
								WriteLine(indent + "if("+ str + ") {");
								WriteLine(indent + "br.Read" + typeDictionary[variableType].Item2 + "();");
								WriteLine(indent + "}" );
							} 
							
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n                            // write\r\n\r\n\t\t\t\t\t\t\t");
            
            #line 271 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
if (byteSize != 0) {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\tbw.Write(bitmap);\r\n\t\t\t\t\t\t\t");
            
            #line 273 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("                            bw.Write(sink);\r\n                            ");
            
            #line 275 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"

                            indent = "							";
							var _count = 0;
                            foreach (var variable in variables)
                            {
								string str = "(bitmap["+ (_count / 8).ToString() + "]" + " & " + (1 << (_count%8)).ToString() + ") != 0";
								_count++;
                                var variableName = variable.Item1;
                                var variableType = variable.Item2;
								WriteLine(indent + "if("+ str + ") {");
                                WriteLine(indent + "bw.Write(br.Read" + typeDictionary[variableType].Item2 + "());");
								WriteLine(indent + "}" );
                            } 
            
            #line default
            #line hidden
            this.Write("                        }\r\n                    return new SqlBytes(resultMs.ToArr" +
                    "ay());\r\n                }\r\n            }\r\n        }\r\n        //}\r\n\r\n    }\r\n\t");
            
            #line 296 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            
            #line 299 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
foreach (var edge in EdgeList) {
    var edgeName = edge.Item1;
    var variables = edge.Item3;
	var attributeSize = variables.Count();
	var byteSize = (attributeSize - 1) / 8 + 1; 
		if (attributeSize == 0) {
			byteSize = 0;
		}

            
            #line default
            #line hidden
            this.Write("[Serializable]\r\n    [Microsoft.SqlServer.Server.SqlUserDefinedAggregate(Format.Us" +
                    "erDefined,\r\n        IsInvariantToNulls = true,\r\n        IsInvariantToOrder = tru" +
                    "e,\r\n        IsInvariantToDuplicates = false,\r\n        MaxByteSize = -1)]\r\npublic" +
                    " struct ");
            
            #line 314 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write(@"Encoder : IBinarySerialize
{
    private MemoryStream _stream;
    private BinaryWriter _writer;

    public void Init()
    {
        _stream = new MemoryStream();
        _writer = new BinaryWriter(_stream);
    }

    public void Accumulate(
        SqlInt64 sink");
            
            #line 326 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"

    var indent = "        ";
    for (var i = 0; i < variables.Count; ++i)
    {
        WriteLine(",");
        Write(indent + "Sql" + typeDictionary[variables[i].Item2].Item2 + " " + variables[i].Item1);
    }
            
            #line default
            #line hidden
            this.Write(")\r\n    {\r\n        if (sink.IsNull)\r\n            return;\r\n\t\t");
            
            #line 336 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
if (byteSize != 0) {
            
            #line default
            #line hidden
            this.Write("\t\tByte[] bitmap = new Byte[");
            
            #line 337 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(byteSize));
            
            #line default
            #line hidden
            this.Write("];\r\n\t\tArray.Clear(bitmap, 0, bitmap.Length);\r\n\t\t");
            
            #line 339 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 340 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"

	var count = 0;
    foreach (var variable in variables)
    {
        var variableName = variable.Item1;
        var variableType = variable.Item2;
		var pos = count / 8;
		var bit = (1 << (count % 8));
        
            
            #line default
            #line hidden
            this.Write("\t\tif (!");
            
            #line 349 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write(".IsNull) {\r\n\t\t\tbitmap[");
            
            #line 350 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pos));
            
            #line default
            #line hidden
            this.Write("] |= ");
            
            #line 350 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(bit));
            
            #line default
            #line hidden
            this.Write("; \r\n\t\t}\r\n    ");
            
            #line 352 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"

		count++;
    }
    
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 356 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
if (byteSize != 0) {
            
            #line default
            #line hidden
            this.Write("\t\t_writer.Write(bitmap);\r\n\t");
            
            #line 358 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("        _writer.Write(sink.Value);\r\n");
            
            #line 360 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"

    foreach (var variable in variables)
    {
        var variableName = variable.Item1;
        var variableType = variable.Item2;
        
            
            #line default
            #line hidden
            this.Write("\t\tif (!");
            
            #line 366 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write(".IsNull) {\r\n\t\t\t_writer.Write(");
            
            #line 367 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write(".Value);\r\n\t\t}\r\n    ");
            
            #line 369 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"

    }
    
            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n\r\n    public void Merge (");
            
            #line 375 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write(@"Encoder group)
    {
        _writer.Write(group._stream.GetBuffer(), 0, (int) group._stream.Length);
    }

    public SqlBytes Terminate()
    {
        var bytes = _stream.ToArray();
        return new SqlBytes(bytes);
    }

    public void Read(BinaryReader r)
    {
        if (_stream != null)
            _stream.Dispose();
        if (_writer != null)
            _writer.Dispose();
        _stream = new MemoryStream();
        _writer = new BinaryWriter(_stream);
        _writer.Write(r.ReadBytes((int)r.BaseStream.Length));
    }

    public void Write(BinaryWriter w)
    {
        w.Write(_stream.ToArray());
    }


}

	
");
            
            #line 406 "D:\Source\graphview\GraphView\NodeTableGraphViewDefinedFunctionTemplate.tt"
}
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class NodeTableGraphViewDefinedFunctionTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
