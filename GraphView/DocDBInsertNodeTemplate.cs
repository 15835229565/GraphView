// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace GraphView
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\source\graphview\GraphView\DocDBInsertNodeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class DocDBInsertNodeTemplate : DocDBInsertNodeTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"

namespace ConsoleApplication1
{
    using System;
    using System.Configuration;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Collections;
    using System.IO;
    using System.Text;

    // Add DocumentDB references
    using Microsoft.Azure.Documents;
    using Microsoft.Azure.Documents.Client;
    using Microsoft.Azure.Documents.Linq;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    public class Program
    {
        // Read the DocumentDB endpointUrl and authorizationKey from config file
        // WARNING: Never store credentials in source code
        // For more information, visit http://azure.microsoft.com/blog/2013/07/17/windows-azure-web-sites-how-application-strings-and-connection-strings-work/
        private const string EndpointUrl = """);
            
            #line 31 "D:\source\graphview\GraphView\DocDBInsertNodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EndpointUrl));
            
            #line default
            #line hidden
            this.Write("\";\r\n        private const string AuthorizationKey = \"");
            
            #line 32 "D:\source\graphview\GraphView\DocDBInsertNodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AuthorizationKey));
            
            #line default
            #line hidden
            this.Write("\";\r\n        private static DocumentClient client;\r\n        private static Databas" +
                    "e database;\r\n        private static DocumentCollection documentCollection;\r\n\r\n  " +
                    "      public static void Main()\r\n        {\r\n            try\r\n            {\r\n    " +
                    "            GetStartedDemo().Wait();\r\n            }\r\n            catch (Document" +
                    "ClientException de)\r\n            {\r\n                Exception baseException = de" +
                    ".GetBaseException();\r\n                Console.WriteLine(\"{0} error occurred: {1}" +
                    ", Message: {2}\", de.StatusCode, de.Message, baseException.Message);\r\n           " +
                    "     //return de.StatusCode +\"---------------->\"+ de.Message +\"---------------->" +
                    "\"+ baseException.Message;\r\n                Console.ReadKey();\r\n            }\r\n  " +
                    "          catch (Exception e)\r\n            {\r\n                Exception baseExce" +
                    "ption = e.GetBaseException();\r\n                Console.WriteLine(\"Error: {0}, Me" +
                    "ssage: {1}\", e.Message, baseException.Message);\r\n                FileStream aFil" +
                    "e = new FileStream(\"D:\\\\file.txt\", FileMode.Create);\r\n                StreamWrit" +
                    "er File = new StreamWriter(aFile);\r\n                File.Write(e.Message +\"-----" +
                    "----------->\"+ baseException.Message);\r\n                File.Close();\r\n         " +
                    "   }\r\n            finally\r\n            {\r\n                //Console.WriteLine(\"E" +
                    "nd of demo, press any key to exit.\");\r\n                //Console.ReadKey();\r\n   " +
                    "         }\r\n        }\r\n\r\n        public static void insert_reader(ref StringBuil" +
                    "der s1, JsonTextReader reader, ref JsonWriter writer)\r\n            {\r\n\r\n        " +
                    "        switch (reader.TokenType)\r\n                {\r\n                    case J" +
                    "sonToken.StartArray:\r\n                        writer.WriteStartArray();\r\n       " +
                    "                 break;\r\n                    case JsonToken.EndArray:\r\n         " +
                    "               writer.WriteEnd();\r\n                        break;\r\n             " +
                    "       case JsonToken.PropertyName:\r\n                        writer.WritePropert" +
                    "yName(reader.Value.ToString());\r\n                        break;\r\n               " +
                    "     case JsonToken.String:\r\n                        writer.WriteValue(reader.Va" +
                    "lue);\r\n                        break;\r\n                    case JsonToken.Intege" +
                    "r:\r\n                        writer.WriteValue(reader.Value);\r\n                  " +
                    "      break;\r\n                    case JsonToken.Comment:\r\n                     " +
                    "   writer.WriteComment(reader.Value.ToString());\r\n                        break;" +
                    "\r\n                    case JsonToken.StartObject:\r\n                        write" +
                    "r.WriteStartObject();\r\n                        break;\r\n                    case " +
                    "JsonToken.EndObject:\r\n                        writer.WriteEndObject();\r\n        " +
                    "                break;\r\n                    case JsonToken.Null:\r\n              " +
                    "          writer.WriteNull();\r\n                        break;\r\n                 " +
                    "   case JsonToken.Float:\r\n                        writer.WriteValue(reader.Value" +
                    ");\r\n                        break;\r\n                }\r\n            }\r\n          " +
                    "  //insert s2 into s1 \'s end\r\n            public static void insert_string(ref S" +
                    "tringBuilder s1, string s2, ref JsonWriter writer, bool isObject)\r\n            {" +
                    "\r\n                JsonTextReader reader = new JsonTextReader(new StringReader(s2" +
                    "));\r\n\r\n                while (reader.Read())\r\n                {\r\n               " +
                    "     switch (reader.TokenType)\r\n                    {\r\n                        c" +
                    "ase JsonToken.StartObject:\r\n                            if (isObject) insert_rea" +
                    "der(ref s1, reader, ref writer);\r\n                            break;\r\n          " +
                    "              case JsonToken.EndObject:\r\n                            if (isObjec" +
                    "t) insert_reader(ref s1, reader, ref writer);\r\n                            break" +
                    ";\r\n                        default:\r\n                            insert_reader(r" +
                    "ef s1, reader, ref writer);\r\n                            break;\r\n               " +
                    "     }\r\n                }\r\n            }\r\n            //insert json_str_s2 into " +
                    "json_str_s1 \'s  s3\r\n            //and return the ans\r\n            public static " +
                    "StringBuilder insert_array_element(string s1, string s2, string s3)\r\n           " +
                    " {\r\n                bool find = false;\r\n                Stack sta = new Stack();" +
                    "\r\n\r\n\r\n                StringBuilder sb = new StringBuilder();\r\n                S" +
                    "tringWriter sw = new StringWriter(sb);\r\n                JsonWriter writer = new " +
                    "JsonTextWriter(sw);\r\n\r\n\r\n                JsonTextReader reader1 = new JsonTextRe" +
                    "ader(new StringReader(s1));\r\n                while (reader1.Read())\r\n           " +
                    "     {\r\n                    switch (reader1.TokenType)\r\n                    {\r\n " +
                    "                       case JsonToken.StartArray:\r\n                            w" +
                    "riter.WriteStartArray();\r\n                            if (find)\r\n               " +
                    "                 sta.Push(1);\r\n                            break;\r\n\r\n           " +
                    "             case JsonToken.EndArray:\r\n                            if (find)\r\n  " +
                    "                              sta.Pop();\r\n                            if (find &" +
                    "& sta.Count == 0)\r\n                            {\r\n                              " +
                    "  insert_string(ref sb, s2, ref writer, false);\r\n                               " +
                    " find = false;\r\n                            }\r\n                            write" +
                    "r.WriteEnd();\r\n                            break;\r\n\r\n                        cas" +
                    "e JsonToken.PropertyName:\r\n                            if (reader1.Value.ToStrin" +
                    "g() == s3)\r\n                                find = true;\r\n                      " +
                    "      Console.WriteLine(reader1.Value.ToString());\r\n                            " +
                    "insert_reader(ref sb, reader1, ref writer);\r\n                            break;\r" +
                    "\n\r\n\r\n                        default:\r\n                            insert_reader" +
                    "(ref sb, reader1, ref writer);\r\n                            break;\r\n            " +
                    "        }\r\n                }\r\n\r\n                return sb;\r\n            }\r\n     " +
                    "       //use json_str_s2 replace json_str_s1 \'s property s3 \r\n            //if t" +
                    "here is no property s3 , create one\r\n            public static StringBuilder ins" +
                    "ert_property(string s1, string s2, string s3)\r\n            {\r\n                bo" +
                    "ol find = false;\r\n                bool flag = false;\r\n                Stack sta " +
                    "= new Stack();\r\n\r\n\r\n                StringBuilder sb = new StringBuilder();\r\n   " +
                    "             StringWriter sw = new StringWriter(sb);\r\n                JsonWriter" +
                    " writer = new JsonTextWriter(sw);\r\n\r\n\r\n                JsonTextReader reader1 = " +
                    "new JsonTextReader(new StringReader(s1));\r\n                while (reader1.Read()" +
                    ")\r\n                {\r\n                    switch (reader1.TokenType)\r\n          " +
                    "          {\r\n                        case JsonToken.PropertyName:\r\n             " +
                    "               if (reader1.Value.ToString() == s3)\r\n                            " +
                    "    find = flag = true;\r\n                            insert_reader(ref sb, reade" +
                    "r1, ref writer);\r\n                            if (find)\r\n                       " +
                    "     {\r\n                                find = false;\r\n                         " +
                    "       insert_string(ref sb, s2, ref writer, false);\r\n                          " +
                    "      reader1.Read();\r\n                            }\r\n                          " +
                    "  break;\r\n                        case JsonToken.EndObject:\r\n                   " +
                    "         sta.Pop();\r\n                            if (!flag && sta.Count == 0)\r\n " +
                    "                           {\r\n                                writer.WriteProper" +
                    "tyName(s3);\r\n                                insert_string(ref sb, s2, ref write" +
                    "r, false);\r\n                            }\r\n                            insert_re" +
                    "ader(ref sb, reader1, ref writer);\r\n                            break;\r\n        " +
                    "                case JsonToken.StartObject:\r\n                            sta.Pus" +
                    "h(1);\r\n                            insert_reader(ref sb, reader1, ref writer);\r\n" +
                    "                            break;\r\n                        default:\r\n          " +
                    "                  insert_reader(ref sb, reader1, ref writer);\r\n                 " +
                    "           break;\r\n                    }\r\n                }\r\n\r\n                r" +
                    "eturn sb;\r\n            }\r\n\r\n            public static int get_reverse_edge_num(s" +
                    "tring s1)\r\n            {\r\n                bool flag = false;\r\n                in" +
                    "t now = 1;\r\n\r\n\r\n                JsonTextReader reader1 = new JsonTextReader(new " +
                    "StringReader(s1));\r\n                while (reader1.Read())\r\n                {\r\n " +
                    "                   switch (reader1.TokenType)\r\n                    {\r\n          " +
                    "              case JsonToken.PropertyName:\r\n                            if (read" +
                    "er1.Value.ToString() == \"_reverse_edge\")\r\n                                flag =" +
                    " true;\r\n                            break;\r\n                        case JsonTok" +
                    "en.StartArray:\r\n                            if (flag)\r\n                         " +
                    "   {\r\n                                reader1.Read();\r\n                         " +
                    "       if (reader1.TokenType == JsonToken.EndArray)\r\n                           " +
                    "         return 1;\r\n                                reader1.Read();\r\n           " +
                    "                     reader1.Read();\r\n                                if ((long)" +
                    "reader1.Value == now)\r\n                                    now++;\r\n             " +
                    "                   else\r\n                                    return now;\r\n      " +
                    "                      }\r\n                            break;\r\n                   " +
                    "     case JsonToken.EndArray:\r\n                            if (flag)\r\n          " +
                    "                      return now;\r\n                            break;\r\n         " +
                    "               case JsonToken.StartObject:\r\n                            if (flag" +
                    ")\r\n                            {\r\n                                reader1.Read()" +
                    ";\r\n                                reader1.Read();\r\n                            " +
                    "    if ((long)reader1.Value == now)\r\n                                    now++;\r" +
                    "\n                                else\r\n                                    retur" +
                    "n now;\r\n                            }\r\n                            break;\r\n     " +
                    "               }\r\n                }\r\n                return 1;\r\n            }\r\n " +
                    "           public static int get_edge_num(string s1)\r\n            {\r\n           " +
                    "     bool flag = false;\r\n                int now = 1;\r\n\r\n\r\n                JsonT" +
                    "extReader reader1 = new JsonTextReader(new StringReader(s1));\r\n                w" +
                    "hile (reader1.Read())\r\n                {\r\n                    switch (reader1.To" +
                    "kenType)\r\n                    {\r\n                        case JsonToken.Property" +
                    "Name:\r\n                            if (reader1.Value.ToString() == \"_edge\")\r\n   " +
                    "                             flag = true;\r\n                            break;\r\n " +
                    "                       case JsonToken.StartArray:\r\n                            i" +
                    "f (flag)\r\n                            {\r\n                                reader1" +
                    ".Read();\r\n                                if (reader1.TokenType == JsonToken.End" +
                    "Array)\r\n                                    return 1;\r\n                         " +
                    "       reader1.Read();\r\n                                reader1.Read();\r\n       " +
                    "                         if ((long)reader1.Value == now)\r\n                      " +
                    "              now++;\r\n                                else\r\n                    " +
                    "                return now;\r\n                            }\r\n                    " +
                    "        break;\r\n                        case JsonToken.EndArray:\r\n              " +
                    "              if (flag)\r\n                                return now;\r\n          " +
                    "                  break;\r\n                        case JsonToken.StartObject:\r\n " +
                    "                           if (flag)\r\n                            {\r\n           " +
                    "                     reader1.Read();\r\n                                reader1.Re" +
                    "ad();\r\n                                if ((long)reader1.Value == now)\r\n        " +
                    "                            now++;\r\n                                else\r\n      " +
                    "                              return now;\r\n                            }\r\n      " +
                    "                      break;\r\n                    }\r\n                }\r\n        " +
                    "        return 1;\r\n            }\r\n            public static StringBuilder insert" +
                    "_reverse_edge(string s1, string s2, int num)\r\n            {\r\n                boo" +
                    "l find = false;\r\n                bool Write = false;\r\n\r\n                StringBu" +
                    "ilder sb = new StringBuilder();\r\n                StringWriter sw = new StringWri" +
                    "ter(sb);\r\n                JsonWriter writer = new JsonTextWriter(sw);\r\n\r\n       " +
                    "         JsonTextReader reader1 = new JsonTextReader(new StringReader(s1));\r\n   " +
                    "             while (reader1.Read())\r\n                {\r\n                    swit" +
                    "ch (reader1.TokenType)\r\n                    {\r\n                        case Json" +
                    "Token.PropertyName:\r\n                            if (reader1.Value.ToString() ==" +
                    " \"_reverse_edge\")\r\n                                find = true;\r\n               " +
                    "             insert_reader(ref sb, reader1, ref writer);\r\n                      " +
                    "      //if (find)\r\n                            //{\r\n                            " +
                    "//    find = false;\r\n                            //    insert_string(ref sb, s2," +
                    " ref writer);\r\n                            //    reader1.Read();\r\n              " +
                    "              //}\r\n                            break;\r\n                        c" +
                    "ase JsonToken.StartArray:\r\n                            insert_reader(ref sb, rea" +
                    "der1, ref writer);\r\n                            if (find)\r\n                     " +
                    "       {\r\n                                if (num == 1)\r\n                       " +
                    "         {\r\n                                    insert_string(ref sb, s2, ref wr" +
                    "iter, true);\r\n                                    Write = true;\r\n               " +
                    "                 }\r\n                            }\r\n                            b" +
                    "reak;\r\n                        case JsonToken.StartObject:\r\n                    " +
                    "        if (!find || Write)\r\n                                insert_reader(ref s" +
                    "b, reader1, ref writer);\r\n                            else\r\n                    " +
                    "        {\r\n                                reader1.Read();\r\n                    " +
                    "            reader1.Read();\r\n                                if ((long)reader1.V" +
                    "alue > num)\r\n                                {\r\n                                " +
                    "    insert_string(ref sb, s2, ref writer, true);\r\n                              " +
                    "      Write = true;\r\n                                }\r\n                        " +
                    "        writer.WriteStartObject();\r\n                                writer.Write" +
                    "PropertyName(\"_ID\");\r\n                                insert_reader(ref sb, read" +
                    "er1, ref writer);\r\n                            }\r\n                            br" +
                    "eak;\r\n                        case JsonToken.EndArray:\r\n                        " +
                    "    if (find)\r\n                            {\r\n                                fi" +
                    "nd = false;\r\n                                if (!Write)\r\n                      " +
                    "          {\r\n                                    insert_string(ref sb, s2, ref w" +
                    "riter, true);\r\n                                    Write = true;\r\n              " +
                    "                  }\r\n                            }\r\n                            " +
                    "insert_reader(ref sb, reader1, ref writer);\r\n                            break;\r" +
                    "\n                        default:\r\n                            insert_reader(ref" +
                    " sb, reader1, ref writer);\r\n                            break;\r\n                " +
                    "    }\r\n                }\r\n\r\n                return sb;\r\n            }\r\n         " +
                    "   public static StringBuilder insert_edge(string s1, string s2, int num)\r\n     " +
                    "       {\r\n                bool find = false;\r\n                bool Write = false" +
                    ";\r\n\r\n                StringBuilder sb = new StringBuilder();\r\n                St" +
                    "ringWriter sw = new StringWriter(sb);\r\n                JsonWriter writer = new J" +
                    "sonTextWriter(sw);\r\n\r\n                JsonTextReader reader1 = new JsonTextReade" +
                    "r(new StringReader(s1));\r\n                while (reader1.Read())\r\n              " +
                    "  {\r\n                    switch (reader1.TokenType)\r\n                    {\r\n    " +
                    "                    case JsonToken.PropertyName:\r\n                            if" +
                    " (reader1.Value.ToString() == \"_edge\")\r\n                                find = t" +
                    "rue;\r\n                            insert_reader(ref sb, reader1, ref writer);\r\n " +
                    "                           //if (find)\r\n                            //{\r\n       " +
                    "                     //    find = false;\r\n                            //    inse" +
                    "rt_string(ref sb, s2, ref writer);\r\n                            //    reader1.Re" +
                    "ad();\r\n                            //}\r\n                            break;\r\n    " +
                    "                    case JsonToken.StartArray:\r\n                            inse" +
                    "rt_reader(ref sb, reader1, ref writer);\r\n                            if (find)\r\n" +
                    "                            {\r\n                                if (num == 1)\r\n  " +
                    "                              {\r\n                                    insert_stri" +
                    "ng(ref sb, s2, ref writer, true);\r\n                                    Write = t" +
                    "rue;\r\n                                }\r\n                            }\r\n        " +
                    "                    break;\r\n                        case JsonToken.StartObject:\r" +
                    "\n                            if (!find || Write)\r\n                              " +
                    "  insert_reader(ref sb, reader1, ref writer);\r\n                            else\r" +
                    "\n                            {\r\n                                reader1.Read();\r" +
                    "\n                                reader1.Read();\r\n                              " +
                    "  if ((long)reader1.Value > num)\r\n                                {\r\n           " +
                    "                         insert_string(ref sb, s2, ref writer, true);\r\n         " +
                    "                           Write = true;\r\n                                }\r\n   " +
                    "                             writer.WriteStartObject();\r\n                       " +
                    "         writer.WritePropertyName(\"_ID\");\r\n                                inser" +
                    "t_reader(ref sb, reader1, ref writer);\r\n                            }\r\n         " +
                    "                   break;\r\n                        case JsonToken.EndArray:\r\n   " +
                    "                         if (find)\r\n                            {\r\n             " +
                    "                   find = false;\r\n                                if (!Write)\r\n " +
                    "                               {\r\n                                    insert_str" +
                    "ing(ref sb, s2, ref writer, true);\r\n                                    Write = " +
                    "true;\r\n                                }\r\n                            }\r\n       " +
                    "                     insert_reader(ref sb, reader1, ref writer);\r\n              " +
                    "              break;\r\n                        default:\r\n                        " +
                    "    insert_reader(ref sb, reader1, ref writer);\r\n                            bre" +
                    "ak;\r\n                    }\r\n                }\r\n\r\n                return sb;\r\n   " +
                    "         }\r\n\r\n            public static async Task INSERT_EDGE(Object source , O" +
                    "bject sink , string Edge, string sourceid, string sinkid)\r\n            {\r\n      " +
                    "          string source_str = JsonConvert.SerializeObject(source);\r\n            " +
                    "    string sink_str = JsonConvert.SerializeObject(sink);\r\n                var so" +
                    "urce_edge_num = get_edge_num(source_str);\r\n                var source_reverse_ed" +
                    "ge_num = get_reverse_edge_num(source_str);\r\n                var sink_edge_num = " +
                    "get_edge_num(sink_str);\r\n                var sink_reverse_edge_num = get_reverse" +
                    "_edge_num(sink_str);\r\n\r\n                Edge = insert_property(Edge, source_edge" +
                    "_num.ToString(), \"_ID\").ToString();\r\n                Edge = insert_property(Edge" +
                    ", sink_reverse_edge_num.ToString(), \"_reverse_ID\").ToString();\r\n                " +
                    "Edge = insert_property(Edge, \'\\\"\' + sinkid + \'\\\"\', \"_sink\").ToString();\r\n       " +
                    "         source_str = insert_edge(source_str, Edge, source_edge_num).ToString();" +
                    "\r\n                var new_source = JObject.Parse(source_str);\r\n\r\n               " +
                    " Edge = insert_property(Edge, sink_reverse_edge_num.ToString(), \"_ID\").ToString(" +
                    ");\r\n                Edge = insert_property(Edge, source_edge_num.ToString(), \"_r" +
                    "everse_ID\").ToString();\r\n                Edge = insert_property(Edge, \'\\\"\' + sou" +
                    "rceid + \'\\\"\', \"_sink\").ToString();\r\n                sink_str = insert_reverse_ed" +
                    "ge(sink_str, Edge, sink_reverse_edge_num).ToString();\r\n                var new_s" +
                    "ink = JObject.Parse(sink_str);\r\n\r\n                await client.ReplaceDocumentAs" +
                    "ync(UriFactory.CreateDocumentUri(database.Id, documentCollection.Id, sourceid), " +
                    "new_source);\r\n                await client.ReplaceDocumentAsync(UriFactory.Creat" +
                    "eDocumentUri(database.Id, documentCollection.Id, sinkid), new_sink);\r\n          " +
                    "  }\r\n\r\n            public static async Task Delete_Node(string id)\r\n            " +
                    "{\r\n                var docLink = string.Format(\"dbs/{0}/colls/{1}/docs/{2}\",data" +
                    "base.Id, documentCollection.Id, id);\r\n                await client.DeleteDocumen" +
                    "tAsync(docLink);\r\n            }\r\n\r\n        private static async Task GetStartedD" +
                    "emo()\r\n        {\r\n            // Create a new instance of the DocumentClient\r\n  " +
                    "          client = new DocumentClient(new Uri(EndpointUrl), AuthorizationKey);\r\n" +
                    "\r\n            // Check to verify a database with the id=Graphview_DocDB does not" +
                    " exist\r\n            database =\r\n                client.CreateDatabaseQuery().Whe" +
                    "re(db => db.Id == \"");
            
            #line 508 "D:\source\graphview\GraphView\DocDBInsertNodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DatabaseID));
            
            #line default
            #line hidden
            this.Write(@""").AsEnumerable().FirstOrDefault();


            // If the database does not exist, create a new database
            if (database == null)
            {
                database = await client.CreateDatabaseAsync(
                    new Database
                    {
                        Id = """);
            
            #line 517 "D:\source\graphview\GraphView\DocDBInsertNodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DatabaseID));
            
            #line default
            #line hidden
            this.Write("\"\r\n                    });\r\n\r\n                Console.WriteLine(\"Created dbs:");
            
            #line 520 "D:\source\graphview\GraphView\DocDBInsertNodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DatabaseID));
            
            #line default
            #line hidden
            this.Write(@""");
            }

            // Check to verify a document collection with the id=GraphOne does not exist
            documentCollection =
                client.CreateDocumentCollectionQuery(""dbs/"" + database.Id)
                    .Where(c => c.Id == """);
            
            #line 526 "D:\source\graphview\GraphView\DocDBInsertNodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CollectionID));
            
            #line default
            #line hidden
            this.Write(@""")
                    .AsEnumerable()
                    .FirstOrDefault();

            // If the document collection does not exist, create a new collection
            if (documentCollection == null)
            {
                documentCollection = await client.CreateDocumentCollectionAsync(""dbs/"" + database.Id,
                    new DocumentCollection
                    {
                        Id = """);
            
            #line 536 "D:\source\graphview\GraphView\DocDBInsertNodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CollectionID));
            
            #line default
            #line hidden
            this.Write("\"\r\n                    });\r\n\r\n                Console.WriteLine(\"Created dbs/");
            
            #line 539 "D:\source\graphview\GraphView\DocDBInsertNodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DatabaseID));
            
            #line default
            #line hidden
            this.Write("/colls/");
            
            #line 539 "D:\source\graphview\GraphView\DocDBInsertNodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CollectionID));
            
            #line default
            #line hidden
            this.Write("\");\r\n            }\r\n\r\n\t\t\tstring json_str = @\"");
            
            #line 542 "D:\source\graphview\GraphView\DocDBInsertNodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(json_str));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\tvar obj = JObject.Parse(json_str);\r\n\r\n\t\t\tawait client.CreateDocumentAsync(" +
                    "\"dbs/\" + database.Id + \"/colls/\" + documentCollection.Id, obj);\r\n\t\t\t\r\n        }\r" +
                    "\n\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class DocDBInsertNodeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
