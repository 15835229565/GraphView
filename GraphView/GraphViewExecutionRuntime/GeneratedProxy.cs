//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IMessageService")]
public interface IMessageService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/SendMessage", ReplyAction="http://tempuri.org/IMessageService/SendMessageResponse")]
    void SendMessage(string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/SendMessage", ReplyAction="http://tempuri.org/IMessageService/SendMessageResponse")]
    System.Threading.Tasks.Task SendMessageAsync(string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/SendMessageWithSource", ReplyAction="http://tempuri.org/IMessageService/SendMessageWithSourceResponse")]
    void SendMessageWithSource(string message, int from);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/SendMessageWithSource", ReplyAction="http://tempuri.org/IMessageService/SendMessageWithSourceResponse")]
    System.Threading.Tasks.Task SendMessageWithSourceAsync(string message, int from);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/SendSignal", ReplyAction="http://tempuri.org/IMessageService/SendSignalResponse")]
    void SendSignal(string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/SendSignal", ReplyAction="http://tempuri.org/IMessageService/SendSignalResponse")]
    System.Threading.Tasks.Task SendSignalAsync(string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/SendSignalWithSource", ReplyAction="http://tempuri.org/IMessageService/SendSignalWithSourceResponse")]
    void SendSignalWithSource(string message, int from);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/SendSignalWithSource", ReplyAction="http://tempuri.org/IMessageService/SendSignalWithSourceResponse")]
    System.Threading.Tasks.Task SendSignalWithSourceAsync(string message, int from);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IMessageServiceChannel : IMessageService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class MessageServiceClient : System.ServiceModel.ClientBase<IMessageService>, IMessageService
{
    
    public MessageServiceClient()
    {
    }
    
    public MessageServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MessageServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MessageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MessageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void SendMessage(string message)
    {
        base.Channel.SendMessage(message);
    }
    
    public System.Threading.Tasks.Task SendMessageAsync(string message)
    {
        return base.Channel.SendMessageAsync(message);
    }
    
    public void SendMessageWithSource(string message, int from)
    {
        base.Channel.SendMessageWithSource(message, from);
    }
    
    public System.Threading.Tasks.Task SendMessageWithSourceAsync(string message, int from)
    {
        return base.Channel.SendMessageWithSourceAsync(message, from);
    }
    
    public void SendSignal(string message)
    {
        base.Channel.SendSignal(message);
    }
    
    public System.Threading.Tasks.Task SendSignalAsync(string message)
    {
        return base.Channel.SendSignalAsync(message);
    }
    
    public void SendSignalWithSource(string message, int from)
    {
        base.Channel.SendSignalWithSource(message, from);
    }
    
    public System.Threading.Tasks.Task SendSignalWithSourceAsync(string message, int from)
    {
        return base.Channel.SendSignalWithSourceAsync(message, from);
    }
}
