<#@ template language="C#" #>
    <#@ assembly name="System.Core" #>
    <#@ import namespace="System.Linq" #>
    <#@ import namespace="System.Text" #>
    <#@ import namespace="System.Collections.Generic" #>
    <#@ output extension=".cs" #>

<#
    var typeDictionary = new Dictionary<string, Tuple<string, string>> 
{ 
{"int", new Tuple<string, string>("int", "Int32")},
{"long", new Tuple<string, string>("bigint", "Int64")},
{"double", new Tuple<string, string>("float", "Double")},
{"string", new Tuple<string, string>("nvarchar(4000)", "String")}
    };#>
    using System;
    using System.IO;
    using System.Collections;
	using System.Collections.Generic;
    using System.Data.SqlTypes;
    using System.Text;
    using Microsoft.SqlServer.Server;

    public partial class UserDefinedFunctions
	{
    private class <#=EdgeName#>DecoderResult
    {
		public long Sink { get; set; }
		public Int32 EdgeId{ get; set; }
<#foreach (var variable in AttributeTypeDict) {#>
		public Sql<#=typeDictionary[variable.Value].Item2#> <#=variable.Key#> { get; set; }
<#}#>
	}

    public static void <#=EdgeName#>Decoder_FillRow(
    object tableTypeObject,
    out SqlInt64 sink, out SqlInt32 edgeid<#
    var indent = "        ";
    foreach (var variable in AttributeTypeDict) {
        WriteLine(",");
        Write(indent + "out Sql" + typeDictionary[variable.Value].Item2 + " " + variable.Key);
    }#>)
    {
        var decoderResult = (<#=EdgeName#>DecoderResult)tableTypeObject;
        sink = decoderResult.Sink;
        edgeid = decoderResult.EdgeId;
<#foreach (var variable in AttributeTypeDict) {#>
		<#=variable.Key#> = decoderResult.<#=variable.Key#>;
<#}#>
    }

    [SqlFunction(
    DataAccess = DataAccessKind.None,
    TableDefinition = "Sink bigint, EdgeId int<#
    foreach(var variable in AttributeTypeDict)
    Write(", " + variable.Key + " " + typeDictionary[variable.Value].Item1);
#>",
    FillRowMethodName = "<#=EdgeName#>Decoder_FillRow",
    IsDeterministic = true,
    IsPrecise = false
    )]

	public static IEnumerable <#=EdgeName#>Decoder(
<#
    if (Mapping.Count() != 0){
        Write(indent + "SqlBytes array0");
        WriteLine(",");
        Write(indent + "SqlBytes dele0");
    }
    for (int i = 1; i < Mapping.Count(); i++) {
        WriteLine(",");
        Write(indent + "SqlBytes array" + i.ToString());
        WriteLine(",");
        Write(indent + "SqlBytes dele" + i.ToString());
    }#>)
    {
        var edgeid = (Int32)0;
		var deleDict = new Dictionary<Int32, bool>();
<#
    var calc = 0;
	indent += "    ";
    foreach(var it in Mapping) {
        var array = "array" + calc.ToString();
		var dele = "dele" + calc.ToString();
        calc++;
        var variables = it.Value;
        var attributeSize = variables.Count();
        var byteSize = (attributeSize - 1) / 8 + 1; 
        if (attributeSize == 0) {
            byteSize = 0;
        }
#>
		edgeid = 0;
		deleDict.Clear();
		if (<#=dele#> != null && !<#=dele#>.IsNull) 
		{
			//var brdele = new BinaryReader(new MemoryStream(<#=dele#>.Value));
			var brdele = new BinaryReader(<#=dele#>.Stream));
			while (brdele.BaseStream.Position != brdele.BaseStream.Length)
			{
				deleDict[brdele.ReadInt32()] = true;
			}
		}
		if (<#=array#> != null && !<#=array#>.IsNull)
		{
        //var br = new BinaryReader(new MemoryStream(<#=array#>.Value));
        var br = new BinaryReader(<#=array#>.Stream);
        while (br.BaseStream.Position != br.BaseStream.Length)
        {
            edgeid++;
<#if (byteSize != 0) {#>
            byte[] bitmap = br.ReadBytes(<#=byteSize#>);
<#}#>
            var sink = br.ReadInt64();
            object temp;
<#
            var count = 0;
            foreach (var iterator in AttributeTypeDict) {
                    WriteLine(indent + "var _" + iterator.Key + " = Sql" + typeDictionary[iterator.Value].Item2 + ".Null;"); }
            foreach (var variable in variables)
            {
                    var variableName = (variable.Item2 == "") ? "temp": "_" + variable.Item2;
                    var variableType = variable.Item1;
                    var str = "((bitmap["+ (count / 8).ToString() + "]" + " & " + (1 << (count%8)).ToString() + ") == 0)? Sql" + typeDictionary[variableType].Item2 + ".Null" +" :";
                    if (attributeSize == 0) {
                        str = "";
                    }
                    WriteLine(indent + variableName + " = " + str + "br.Read" + typeDictionary[variableType].Item2 + "();");
                    count++;
            }
#>
			if (!deleDict.ContainsKey(edgeid)) {
				yield return new <#=EdgeName#>DecoderResult
				{
					Sink = sink, EdgeId = edgeid,
<#
					foreach (var variable in AttributeTypeDict)
					{
						WriteLine(indent + "    " + variable.Key + " = _" + variable.Key + ",");
					}
#>
				};
			}
        }
		}
<#}#>
		yield break;
    }


   //Path Decoder
    private class <#=EdgeName#>PathDecoderResult 
    {
        public int EdgeId{get; set;}
        public long SinkId{get; set;}
<#foreach (var variable in AttributeTypeDict) {#>
        public Sql<#=typeDictionary[variable.Value].Item2#> <#=variable.Key#> { get; set; }
<#}#>
    }

    public static void <#=EdgeName#>PathDecoder_FillRow(
        object tableTypeObject,
        out SqlInt32 EdgeId, out SqlInt64 SinkId <#

		foreach (var variable in AttributeTypeDict) {
            WriteLine(",");
            Write(indent + "out Sql" + typeDictionary[variable.Value].Item2 + " " + variable.Key);
		}#>
        )
    {
        var decoderResult = (<#=EdgeName#>PathDecoderResult)tableTypeObject;
        EdgeId = decoderResult.EdgeId;
        SinkId = decoderResult.SinkId;
<#foreach (var variable in  AttributeTypeDict) {#>
      <#=variable.Key#> = decoderResult.<#=variable.Key#>;
<#}#>
    }
    
        [SqlFunction(
        DataAccess = DataAccessKind.None,
        TableDefinition = "EdgeId int, SinkId bigint",
        FillRowMethodName = "<#=EdgeName#>PathDecoder_FillRow",
        IsDeterministic = true,
        IsPrecise = false
        )]
    public static IEnumerable <#=EdgeName#>PathDecoder(
		SqlBytes  PathVarbinary,
		SqlInt64 nodeid,
<#
	indent = "        ";
    if (Mapping.Count() != 0){
        Write(indent + "SqlBytes array0");
        WriteLine(",");
        Write(indent + "SqlBytes dele0");
    }
    for (int i = 1; i < Mapping.Count(); i++) {
        WriteLine(",");
        Write(indent + "SqlBytes array" + i.ToString());
        WriteLine(",");
        Write(indent + "SqlBytes dele" + i.ToString());
}#>)
    {
        //var PathMemory = (PathVarbinary != null && !PathVarbinary.IsNull) ? new MemoryStream(PathVarbinary.Value) : new MemoryStream();
        Stream PathMemory = (PathVarbinary != null && !PathVarbinary.IsNull) ? PathVarbinary.Stream : new MemoryStream();
		var brPath = new BinaryReader(PathMemory);
        var PathDict =  new Dictionary<Tuple<long, Int32>, bool>();
        if (PathVarbinary != null && !PathVarbinary.IsNull) {
            while (brPath.BaseStream.Position != brPath.BaseStream.Length)
            {
                var Edgeid = Tuple.Create(brPath.ReadInt64(), brPath.ReadInt32());
                PathDict[Edgeid] = true;
            }
        }
        
        foreach (var it in <#=EdgeName#>Decoder(
<#
	indent += "    ";
    if (Mapping.Count() != 0){
        Write(indent + "array0");
        WriteLine(",");
        Write(indent + "dele0");
    }
    for (int i = 1; i < Mapping.Count(); i++) {
        WriteLine(",");
        Write(indent + "array" + i.ToString());
        WriteLine(",");
        Write(indent + "dele" + i.ToString());
}#>))
        {
            var  adjacent = it as <#=EdgeName#>DecoderResult;
            var EdgeId = Tuple.Create(nodeid.Value, adjacent.EdgeId);
            if (!PathDict.ContainsKey(EdgeId))
            {
                yield return new <#=EdgeName#>PathDecoderResult
                {
                    EdgeId = adjacent.EdgeId,
                    SinkId = adjacent.Sink,
<#
					indent += "        ";
					foreach (var variable in AttributeTypeDict) {
                        WriteLine(indent + variable.Key + " = adjacent." + variable.Key + ",");
					}
#>
                };
            }
        }
        yield break;
    }
}