<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>


namespace ConsoleApplication1
{
    using System;
    using System.Configuration;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Collections;
    using System.IO;
    using System.Text;

    // Add DocumentDB references
    using Microsoft.Azure.Documents;
    using Microsoft.Azure.Documents.Client;
    using Microsoft.Azure.Documents.Linq;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System.Collections.Generic;

    public class Program
    {
        // Read the DocumentDB endpointUrl and authorizationKey from config file
        // WARNING: Never store credentials in source code
        // For more information, visit http://azure.microsoft.com/blog/2013/07/17/windows-azure-web-sites-how-application-strings-and-connection-strings-work/
        private const string EndpointUrl = "<#=EndpointUrl#>";
        private const string AuthorizationKey = "<#=AuthorizationKey#>";
        private static DocumentClient client;
        private static Database database;
        private static DocumentCollection documentCollection;

        public static void Main()
        {
            try
            {
                GetStartedDemo().Wait();
            }
            catch (DocumentClientException de)
            {
                Exception baseException = de.GetBaseException();
                Console.WriteLine("{0} error occurred: {1}, Message: {2}", de.StatusCode, de.Message, baseException.Message);
                //return de.StatusCode +"---------------->"+ de.Message +"---------------->"+ baseException.Message;
                Console.ReadKey();
            }
            catch (Exception e)
            {
                Exception baseException = e.GetBaseException();
                Console.WriteLine("Error: {0}, Message: {1}", e.Message, baseException.Message);
                FileStream aFile = new FileStream("D:\\file.txt", FileMode.Create);
                StreamWriter File = new StreamWriter(aFile);
                File.Write(e.Message +"---------------->"+ baseException.Message);
                File.Close();
            }
            finally
            {
                //Console.WriteLine("End of demo, press any key to exit.");
                //Console.ReadKey();
            }
        }

        public static void insert_reader(ref StringBuilder s1, JsonTextReader reader, ref JsonWriter writer)
            {

                switch (reader.TokenType)
                {
                    case JsonToken.StartArray:
                        writer.WriteStartArray();
                        break;
                    case JsonToken.EndArray:
                        writer.WriteEnd();
                        break;
                    case JsonToken.PropertyName:
                        writer.WritePropertyName(reader.Value.ToString());
                        break;
                    case JsonToken.String:
                        writer.WriteValue(reader.Value);
                        break;
                    case JsonToken.Integer:
                        writer.WriteValue(reader.Value);
                        break;
                    case JsonToken.Comment:
                        writer.WriteComment(reader.Value.ToString());
                        break;
                    case JsonToken.StartObject:
                        writer.WriteStartObject();
                        break;
                    case JsonToken.EndObject:
                        writer.WriteEndObject();
                        break;
                    case JsonToken.Null:
                        writer.WriteNull();
                        break;
                    case JsonToken.Float:
                        writer.WriteValue(reader.Value);
                        break;
                }
            }
            //insert s2 into s1 's end
            public static void insert_string(ref StringBuilder s1, string s2, ref JsonWriter writer, bool isObject)
            {
                JsonTextReader reader = new JsonTextReader(new StringReader(s2));

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case JsonToken.StartObject:
                            if (isObject) insert_reader(ref s1, reader, ref writer);
                            break;
                        case JsonToken.EndObject:
                            if (isObject) insert_reader(ref s1, reader, ref writer);
                            break;
                        default:
                            insert_reader(ref s1, reader, ref writer);
                            break;
                    }
                }
            }
            //insert json_str_s2 into json_str_s1 's  s3
            //and return the ans
            public static StringBuilder insert_array_element(string s1, string s2, string s3)
            {
                bool find = false;
                Stack sta = new Stack();


                StringBuilder sb = new StringBuilder();
                StringWriter sw = new StringWriter(sb);
                JsonWriter writer = new JsonTextWriter(sw);


                JsonTextReader reader1 = new JsonTextReader(new StringReader(s1));
                while (reader1.Read())
                {
                    switch (reader1.TokenType)
                    {
                        case JsonToken.StartArray:
                            writer.WriteStartArray();
                            if (find)
                                sta.Push(1);
                            break;

                        case JsonToken.EndArray:
                            if (find)
                                sta.Pop();
                            if (find && sta.Count == 0)
                            {
                                insert_string(ref sb, s2, ref writer, false);
                                find = false;
                            }
                            writer.WriteEnd();
                            break;

                        case JsonToken.PropertyName:
                            if (reader1.Value.ToString() == s3)
                                find = true;
                            Console.WriteLine(reader1.Value.ToString());
                            insert_reader(ref sb, reader1, ref writer);
                            break;


                        default:
                            insert_reader(ref sb, reader1, ref writer);
                            break;
                    }
                }

                return sb;
            }
            //use json_str_s2 replace json_str_s1 's property s3 
            //if there is no property s3 , create one
            public static StringBuilder insert_property(string s1, string s2, string s3)
            {
                bool find = false;
                bool flag = false;
                Stack sta = new Stack();


                StringBuilder sb = new StringBuilder();
                StringWriter sw = new StringWriter(sb);
                JsonWriter writer = new JsonTextWriter(sw);


                JsonTextReader reader1 = new JsonTextReader(new StringReader(s1));
                while (reader1.Read())
                {
                    switch (reader1.TokenType)
                    {
                        case JsonToken.PropertyName:
                            if (reader1.Value.ToString() == s3)
                                find = flag = true;
                            insert_reader(ref sb, reader1, ref writer);
                            if (find)
                            {
                                find = false;
                                insert_string(ref sb, s2, ref writer, false);
                                reader1.Read();
                            }
                            break;
                        case JsonToken.EndObject:
                            sta.Pop();
                            if (!flag && sta.Count == 0)
                            {
                                writer.WritePropertyName(s3);
                                insert_string(ref sb, s2, ref writer, false);
                            }
                            insert_reader(ref sb, reader1, ref writer);
                            break;
                        case JsonToken.StartObject:
                            sta.Push(1);
                            insert_reader(ref sb, reader1, ref writer);
                            break;
                        default:
                            insert_reader(ref sb, reader1, ref writer);
                            break;
                    }
                }

                return sb;
            }

            public static int get_reverse_edge_num(string s1)
            {
                bool flag = false;
                int now = 1;


                JsonTextReader reader1 = new JsonTextReader(new StringReader(s1));
                while (reader1.Read())
                {
                    switch (reader1.TokenType)
                    {
                        case JsonToken.PropertyName:
                            if (reader1.Value.ToString() == "_reverse_edge")
                                flag = true;
                            break;
                        case JsonToken.StartArray:
                            if (flag)
                            {
                                reader1.Read();
                                if (reader1.TokenType == JsonToken.EndArray)
                                    return 1;
                                reader1.Read();
                                reader1.Read();
                                if ((long)reader1.Value == now)
                                    now++;
                                else
                                    return now;
                            }
                            break;
                        case JsonToken.EndArray:
                            if (flag)
                                return now;
                            break;
                        case JsonToken.StartObject:
                            if (flag)
                            {
                                reader1.Read();
                                reader1.Read();
                                if ((long)reader1.Value == now)
                                    now++;
                                else
                                    return now;
                            }
                            break;
                    }
                }
                return 1;
            }
            public static int get_edge_num(string s1)
            {
                bool flag = false;
                int now = 1;


                JsonTextReader reader1 = new JsonTextReader(new StringReader(s1));
                while (reader1.Read())
                {
                    switch (reader1.TokenType)
                    {
                        case JsonToken.PropertyName:
                            if (reader1.Value.ToString() == "_edge")
                                flag = true;
                            break;
                        case JsonToken.StartArray:
                            if (flag)
                            {
                                reader1.Read();
                                if (reader1.TokenType == JsonToken.EndArray)
                                    return 1;
                                reader1.Read();
                                reader1.Read();
                                if ((long)reader1.Value == now)
                                    now++;
                                else
                                    return now;
                            }
                            break;
                        case JsonToken.EndArray:
                            if (flag)
                                return now;
                            break;
                        case JsonToken.StartObject:
                            if (flag)
                            {
                                reader1.Read();
                                reader1.Read();
                                if ((long)reader1.Value == now)
                                    now++;
                                else
                                    return now;
                            }
                            break;
                    }
                }
                return 1;
            }
            public static StringBuilder insert_reverse_edge(string s1, string s2, int num)
            {
                bool find = false;
                bool Write = false;

                StringBuilder sb = new StringBuilder();
                StringWriter sw = new StringWriter(sb);
                JsonWriter writer = new JsonTextWriter(sw);

                JsonTextReader reader1 = new JsonTextReader(new StringReader(s1));
                while (reader1.Read())
                {
                    switch (reader1.TokenType)
                    {
                        case JsonToken.PropertyName:
                            if (reader1.Value.ToString() == "_reverse_edge")
                                find = true;
                            insert_reader(ref sb, reader1, ref writer);
                            //if (find)
                            //{
                            //    find = false;
                            //    insert_string(ref sb, s2, ref writer);
                            //    reader1.Read();
                            //}
                            break;
                        case JsonToken.StartArray:
                            insert_reader(ref sb, reader1, ref writer);
                            if (find)
                            {
                                if (num == 1)
                                {
                                    insert_string(ref sb, s2, ref writer, true);
                                    Write = true;
                                }
                            }
                            break;
                        case JsonToken.StartObject:
                            if (!find || Write)
                                insert_reader(ref sb, reader1, ref writer);
                            else
                            {
                                reader1.Read();
                                reader1.Read();
                                if ((long)reader1.Value > num)
                                {
                                    insert_string(ref sb, s2, ref writer, true);
                                    Write = true;
                                }
                                writer.WriteStartObject();
                                writer.WritePropertyName("_ID");
                                insert_reader(ref sb, reader1, ref writer);
                            }
                            break;
                        case JsonToken.EndArray:
                            if (find)
                            {
                                find = false;
                                if (!Write)
                                {
                                    insert_string(ref sb, s2, ref writer, true);
                                    Write = true;
                                }
                            }
                            insert_reader(ref sb, reader1, ref writer);
                            break;
                        default:
                            insert_reader(ref sb, reader1, ref writer);
                            break;
                    }
                }

                return sb;
            }
            public static StringBuilder insert_edge(string s1, string s2, int num)
            {
                bool find = false;
                bool Write = false;

                StringBuilder sb = new StringBuilder();
                StringWriter sw = new StringWriter(sb);
                JsonWriter writer = new JsonTextWriter(sw);

                JsonTextReader reader1 = new JsonTextReader(new StringReader(s1));
                while (reader1.Read())
                {
                    switch (reader1.TokenType)
                    {
                        case JsonToken.PropertyName:
                            if (reader1.Value.ToString() == "_edge")
                                find = true;
                            insert_reader(ref sb, reader1, ref writer);
                            //if (find)
                            //{
                            //    find = false;
                            //    insert_string(ref sb, s2, ref writer);
                            //    reader1.Read();
                            //}
                            break;
                        case JsonToken.StartArray:
                            insert_reader(ref sb, reader1, ref writer);
                            if (find)
                            {
                                if (num == 1)
                                {
                                    insert_string(ref sb, s2, ref writer, true);
                                    Write = true;
                                }
                            }
                            break;
                        case JsonToken.StartObject:
                            if (!find || Write)
                                insert_reader(ref sb, reader1, ref writer);
                            else
                            {
                                reader1.Read();
                                reader1.Read();
                                if ((long)reader1.Value > num)
                                {
                                    insert_string(ref sb, s2, ref writer, true);
                                    Write = true;
                                }
                                writer.WriteStartObject();
                                writer.WritePropertyName("_ID");
                                insert_reader(ref sb, reader1, ref writer);
                            }
                            break;
                        case JsonToken.EndArray:
                            if (find)
                            {
                                find = false;
                                if (!Write)
                                {
                                    insert_string(ref sb, s2, ref writer, true);
                                    Write = true;
                                }
                            }
                            insert_reader(ref sb, reader1, ref writer);
                            break;
                        default:
                            insert_reader(ref sb, reader1, ref writer);
                            break;
                    }
                }

                return sb;
            }

            public static async Task INSERT_EDGE(Object source , Object sink , string Edge, string sourceid, string sinkid)
            {
                string source_str = JsonConvert.SerializeObject(source);
                string sink_str = JsonConvert.SerializeObject(sink);
                var source_edge_num = get_edge_num(source_str);
                var source_reverse_edge_num = get_reverse_edge_num(source_str);
                var sink_edge_num = get_edge_num(sink_str);
                var sink_reverse_edge_num = get_reverse_edge_num(sink_str);

                Edge = insert_property(Edge, source_edge_num.ToString(), "_ID").ToString();
                Edge = insert_property(Edge, sink_reverse_edge_num.ToString(), "_reverse_ID").ToString();
                Edge = insert_property(Edge, '\"' + sinkid + '\"', "_sink").ToString();
                source_str = insert_edge(source_str, Edge, source_edge_num).ToString();
                var new_source = JObject.Parse(source_str);

                Edge = insert_property(Edge, sink_reverse_edge_num.ToString(), "_ID").ToString();
                Edge = insert_property(Edge, source_edge_num.ToString(), "_reverse_ID").ToString();
                Edge = insert_property(Edge, '\"' + sourceid + '\"', "_sink").ToString();
                sink_str = insert_reverse_edge(sink_str, Edge, sink_reverse_edge_num).ToString();
                var new_sink = JObject.Parse(sink_str);

                await client.ReplaceDocumentAsync(UriFactory.CreateDocumentUri(database.Id, documentCollection.Id, sourceid), new_source);
                await client.ReplaceDocumentAsync(UriFactory.CreateDocumentUri(database.Id, documentCollection.Id, sinkid), new_sink);
            }

            public static async Task Delete_Node(string id)
            {
                var docLink = string.Format("dbs/{0}/colls/{1}/docs/{2}",database.Id, documentCollection.Id, id);
                await client.DeleteDocumentAsync(docLink);
            }

			public Dictionary<string, string> map=new Dictionary<string,string>();
			public Dictionary<string, string> sink_map=new Dictionary<string,string>();



        private static async Task GetStartedDemo()
        {
            // Create a new instance of the DocumentClient
            client = new DocumentClient(new Uri(EndpointUrl), AuthorizationKey);

            // Check to verify a database with the id=Graphview_DocDB does not exist
            database =
                client.CreateDatabaseQuery().Where(db => db.Id == "<#=DatabaseID#>").AsEnumerable().FirstOrDefault();


            // If the database does not exist, create a new database
            if (database == null)
            {
                database = await client.CreateDatabaseAsync(
                    new Database
                    {
                        Id = "<#=DatabaseID#>"
                    });

                Console.WriteLine("Created dbs:<#=DatabaseID#>");
            }

            // Check to verify a document collection with the id=GraphOne does not exist
            documentCollection =
                client.CreateDocumentCollectionQuery("dbs/" + database.Id)
                    .Where(c => c.Id == "<#=CollectionID#>")
                    .AsEnumerable()
                    .FirstOrDefault();

            // If the document collection does not exist, create a new collection
            if (documentCollection == null)
            {
                documentCollection = await client.CreateDocumentCollectionAsync("dbs/" + database.Id,
                    new DocumentCollection
                    {
                        Id = "<#=CollectionID#>"
                    });

                Console.WriteLine("Created dbs/<#=DatabaseID#>/colls/<#=CollectionID#>");
            }

			
			<#
			foreach (var query_node in SelectQuery)
            {
				Write(@"
							var sum_" + query_node.Key +
								@" = client.CreateDocumentQuery(""dbs/"" + database.Id + ""/colls/"" + documentCollection.Id,
							    "" " + query_node.Selectclause + @" "" +
								"" " + query_node.Fromclause + @" "" +
								"" " + query_node.Whereclause + @" ""
							);
						");
            }
			#>


			<#
			foreach (var query_node in SelectQuery)
            {
				Write(@"
					foreach(var cnt in sum_"+ query_node.Key +@")
					{
						JObject tmp = ((JObject)cnt)[""Doc""];
						string tmpid = tmp[""id""];
						if (!map.ContainsKey(tmpid))
						{
							map[tmpid] = JsonConvert.SerializeObject(tmp);
						}
					}
				");
            }
			#>
			
			foreach(var <#=sink#> in sum_<#=sink#>)
			{
				JObject tmp = ((JObject)<#=sink#>)[""Doc""];
				string tmpid = tmp[""id""];
				if (!sink_map.ContainsKey(tmpid))
					sink_map[tmpid] = JsonConvert.SerializeObject(tmp);
			}
			
			foreach(var <#=source#> in sum_<#=source#>)
			{
				JObject Edge = ((JObject)<#=source#>)[""Edge""];
				JObject Doc = ((JObject)<#=source#>)[""Doc""];
				string sourceid = Doc[""id""];
				string sinkid = Edge[""_sink""];
				if(sink_map.ContainsKey(sinkid))
				{
					await DELETE_EDGE(sourceid, sinkid, Edge[""_ID""], Edge[""_reverse_ID""]);
				}
			}

        }

    }
}